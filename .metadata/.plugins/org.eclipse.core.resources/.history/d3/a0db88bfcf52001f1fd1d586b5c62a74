package com.example.demo.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/api/login", "/api/create").permitAll() // API는 인증 없이 접근 가능
                .antMatchers("/welcome", "/write", "/detail/**").authenticated() // 인증이 필요한 페이지
                .and()
            .csrf().disable() // API 요청을 위한 CSRF 비활성화
            .formLogin().disable() // 기본 로그인 페이지 비활성화
            .logout().logoutSuccessUrl("/login").permitAll(); // 로그아웃 후 리다이렉트 URL 설정
    }


    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
