게시판 만들기

프론트:
시작페이지는 Login.js 이며, 이는 로그인 페이지이다.
아이디 입력 폼, 비밀번호 입력 폼, 로그인 버튼, 회원가입 버튼 이 존재한다.
회원가입 버튼을 클릭하면 Create.js 로 이동.
각각의 폼에 값을 입력한 후 로그인 버튼을 클릭하면 입력된 값을 백으로 전송.
백으로부터 token을 전송 받는다면, token의 값을 세션스토리지에 저장한 후 Welcome.js로 이동.
백으로부터 loginError를 전송 받는다면, loginError의 값을 alert로 출력.

Create.js는 회원가입 페이지다.
아이디 입력 폼, 비밀번호 입력 폼, 비밀번호확인 입력 폼, 직원번호 입력 폼, 제출 버튼, 홈 버튼이 존재한다.
홈 버튼을 클릭하면, Login.js로 이동.
각각의 폼에 값을 입력한 후 제출 버튼을 눌렀을때,
비밀번호 값과 비밀번호확인 값이 동일하지 않다면, '비밀번호가 일치하지 않습니다.' 를 alert로 출력.
비밀번호 값과 비밀번호확인 값이 동일하다면, 아이디 입력 값, 비밀번호 입력 값, 직원번호 입력 값을 백으로 전송한다.
백으로부터 createSuccess를 전송받는다면, createSuccess의 값을 alert로 출력한 후 Login.js로 이동.
백으로부터 createError를 전송 받는다면, createError의 값을 alert로 출력.

Welcome.js는 글목록 페이지이며, 세션 스토리지에 저장된 JWT 토큰이 존재하는 경우에만 접근할 수 있다.
글쓰기 버튼, 로그아웃 버튼, 글목록 테이블이 존재한다.
글쓰기 버튼을 클릭하면 , Write.js로 이동.
로그아웃 버튼을 클릭하면 세션 스토리지에 저장된 JWT토큰을 삭제하고 Login.js로 이동.
글목록 테이블의 첫번째 행은 '제목', '아이디', '날짜' 로 출력되고 그 아래로 List<Record>의 값을 출력.
제목 칼럼은 하이퍼텍스트로 설정하고 클릭하면 detail/${record.id}로 이동.

Write.js는 글쓰기 페이지이며, 세션 스토리지에 저장된 JWT 토큰이 존재하는 경우에만 접근할 수 있다.
제목 입력 폼, 내용 입력 폼, 제출 버튼, 글목록 버튼이 존재한다.
제출 버튼을 클릭할때,
제목 입력 폼이 비어있다면, '제목을 입력해 주세요' 문자열이 alert로 출력.
내용 입력 폼이 비어있다면, '내용을 입력해 주세요' 문자열이 alert로 출력.
제목 입력 폼 그리고 내용 입력 폼에 값이 존재한다면 입력된 값을 백으로 전송한 후 Welcome.js로 이동.
글목록 버튼을 클릭하면 Welcome.js로 이동.

Detail.js는 세부내용 페이지이며, 세션 스토리지에 저장된 JWT토큰이 존재하는 경우에만 접근할 수 있다.
글목록 버튼, 로그아웃 버튼, 글 삭제 버튼, 디테일 테이블이 존재한다.
글목록 버튼을 클릭하면 Welcome.js로 이동.
로그아웃 버튼을 클릭하면 세션 스토리지에 저장된 JWT토큰을 삭제하고 Login.js로 이동.
글 삭제 버튼을 누르면 현재 세션의 jwt 토큰에 해당되는 사용자의 아이디값이 백으로 전송.
백으로부터 deleteSuccess를 전송받는다면, deleteSuccess의 값을 alert로 출력한 후 Welcome.js로 이동.
백으로부터 deleteError를 전송 받는다면, deleteError의 값을 alert로 출력.
디테일 테이블의 첫번째 열은 '제목', '아이디', '날짜', '내용' 으로 출력되고 그 오른쪽에 selected의 값을 출력.

백:
Create.js 에서 전송받은 3개의 값과 UserList 테이블을 비교했을때,
직원번호가 일치하는 레코드가 존재한다면, createError변수에 '이미 가입했습니다.' 문자열 저장 후 프론트로 전송.
직원번호는 일치하지 않으나, 아이디가 일치하는 레코드가 존재한다면, 'createError변수에 '이미 존재하는 아이디입니다.' 문자열 저장 후 프론트로 전송.
아이디와 직원번호 모두 일치하는 레코드가 존재하지않는다면. 전송받은 3개의 값을 레코드에 저장하고 createSuccess 변수에 '환영합니다!!!' 문자열 저장 후 프론트로 전송.

Login.js 에서 전송받은 2개의 값과 UserList 테이블을 비교했을때,
일치하는 아이디가 존재하지 않는다면, loginError 변수에 '존재하지 않는 아이디입니다.' 문자열 저장후 프론트로 전송.
일치하는 아이디는 존재하지만 비밀번호가 일치하지 않는다면, loginError 변수에 '비밀번호가 일치하지 않습니다.' 문자열 저장후 프론트로 전송.
일치하는 값이 존재한다면,  jwt토큰을 생성하고 token 변수에 그 토큰을 저장한 후 프론트로 전송.

Write.js 에서 전송받은 2개의 값, 현재날짜, 현재 세션의 jwt토큰에 해당되는 사용자의 아이디를 Listicle테이블에 레코드로 저장한다.
Listicle 테이블의 데이터를 제목, 아이디, 날짜순서로 List<Record> 변수에 저장 후 프론트로 전송.

Listicle 테이블에서 ${record.id} 에 해당하는 레코드를 제목, 아이디, 날짜, 내용 순서로 selected변수에 저장 후 프론트로 전송

Detail.js에서 전송받은 사용자의 아이디 값과 Listicle 테이블에서 ${record.id} 에 해당하는 레코드의 아이디값을 비교했을때,
두 값이 동일하다면 해당 레코드를 삭제하고 deleteSuccess변수에 '삭제되었습니다' 문자열 저장 후 프론트로 전송.
두 값이 동일하지않다면 deleteError변수에 '삭제 권한이 없습니다.' 문자열 저장 후 프론트로 전송.


MySql:
DB이름: TeamProject
DB username: root
DB password: 1234

리액트와 sts를 사용해 위와같은 조건으로 작동하기위한 컴포넌트와 클래스를 빠짐없이 작성한다.
로직을 생략없이 전부 작성한다.
"proxy": "http://localhost:8080"
