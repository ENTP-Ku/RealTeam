조건:
리액트, sts, MySql를 활용해서 게시판 웹앱을 제작한다.
스프링부트 3.2.8 에서 작업
자바 버전 17에서 작업
Lombok, Spring Data JPA, MySql Driver, Spring Web, Spring Security 의존성을 미리 추가 했다.
DB이름: TeamProject
DB username: root
DB password: 1234
User엔티티 클래스에서 생성하는 테이블 이름은 @Table 어노테이션을 써서 'UserList'로 변경한다
Record 테이블의 글번호는 최신의 레코드일수록 작아야한다 즉, 마지막에 추가된 레코드의 글 번호는 1이 되도록 작성.
getter, setter 생성시에는 lombok을 활용한다
maven모드로 작업
spring.jpa.hibernate.ddl-auto=update
리액트 라우터 패키지는 6버전으로 한다
axios 패키지 사용
시큐리티 사용자이름은 qwer 로, 비밀번호는 qwer로 설정
파일들의 버전호환을 고려하여 작성한다
레포지토리의 검색부분은 optional을 사용한다
REST API 호출로 데이터를 전송해야함으로, @RestController 어노테이션을 사용한다.
WebConfig클래스에서 CORS를 설정한다. http://localhost:3000에서 오는 모든 요청을 허용하도록 백엔드에서 설정
API 호출: 프론트엔드 애플리케이션에서 http://localhost:8080의 API를 호출하여 데이터를 요청하거나 전송합니다.
App.js에서 ProtectedRoute컴포넌트를 사용하여 인증된 사용자만 접근할 수 있도록한다.
기본페이지는 Login.js
SecurityConfig 클래스에서 Login.js, Create.js 는 누구나 접근가능, Welcome.js, Write.js, Detail,js 는 로그인된 사용자만 접근가능 하도록 설정.
SecurityConfig 클래스에 BCryptPasswordEncoder 빈을 정의
JWT를 사용하여 클라이언트와 서버 간의 인증 상태를 유지한다.


컴포넌트와 클래스 작성:
Login.js는 로그인 페이지다
아이디입력칸, 비밀번호입력칸, 로그인버튼, 회원가입버튼이 있다.
Login.js에서 회원가입버튼을 누르면 Create.js로 이동.

Create.js는 회원가입 페이지다.
아이디입력칸, 비밀번호입력칸, 비밀번호확인입력칸, 고유번호입력칸, 제출버튼이 있다.
값을 입력한 후 제출 버튼을 누를때
만약 비밀번호와 비밀번호확인의 입력값이 같지않다면 '비밀번호가 일치하지 않습니다.' 알림 출력
만약 이미 List테이블에 입력한 것과 같은 아이디가 존재한다면 '이미 존재하는 아이디 입니다.' 알림 출력.
만약 이미 List테이블에 입력한 것과 같은 고유번호가 존재한다면 '이미 가입되어있습니다' 알림 출력.
만약 List테이블에 입력값과 같은 아이디 또는 고유번호가 없다면 '환영합니다. 로그인 후 이용해주세요' 알림 출력,
List테이블에 입력한 데이터 추가하되 비밀번호는 BCrypt로 암호화할것, 
Login.js로 이동.


Login.js에서 아이디와 비밀번호를 입력하고 로그인 버튼을 눌렀을때,
만약 List테이블의 암호화 된 비밀번호와 아이디 데이터목록 중에서 입력한값과 일치하는것이 있다면, jwt를생성한 뒤 Welcome.js로 이동.
만약 List테이블에 존재하지 않는 아이디라면 '등록되지않은 아이디 입니다.' 알림 출력
만약 List테이블에 아이디는 존재하나 비밀번호가 일치하지 않는다면 '비밀번호가 일치하지 않습니다.' 알림 출력

Welcome.js는 메인 게시판 페이지다.
로그인 권한이 부여되지않은 사용자가 접근하려하면 '로그인 해주세요' 알림 출력 후 Login.js로 이동
Record테이블에서 글번호 ,제목, 작성날짜, 아이디 칼럼을 4열 표에 출력.
제목은 하이퍼 텍스트이며, 클릭하면 해당 레코드의 글번호 데이터를 가지고 Detail.js로 이동
우측 상단에 '로그아웃버튼'이 있다.
'로그아웃버튼'을 클릭하면 Login.js로 이동하며, jwt 토큰 삭제.
우측 하단에'글쓰기' 버튼이 있다.
'글쓰기' 버튼을 클릭하면, Write.js로 이동

Write.js는 글쓰기 페이지다.
로그인 권한이 부여되지않은 사용자가 접근하려하면 '로그인 해주세요' 알림 출력 후 Login.js로 이동
제목 입력칸, 내용 입력칸, '제출버튼'이 있다.
'제출버튼'을 누르면 Record 테이블에 글번호, 제목, 내용, 작성날짜, 아이디, 비밀번호가 추가된다.

Detail.js는 상세내용 페이지다.
로그인 권한이 부여되지않은 사용자가 접근하려하면 '로그인 해주세요' 알림 출력 후 Login.js로 이동
Record테이블의 제목, 아이디, 내용, 작성날짜가 출력된다. Welcome.js에서 클릭했던 제목의 글번호와 같은 레코드의 데이터를 출력한다
중앙 하단에 '목록버튼'이 있다.
'목록버튼'을 클릭하면 Welcome.js로 이동.


필요한 모든 클래스와 컴포넌스를 작성한다.
모든 로직을 생략없이 작성한다.
모든 코드에 한줄한줄 상세하게 설명주석을 쓴다.


